<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>败寇路飞.field</title>
  <subtitle>一只不断学习的渣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chengluffy.github.io/"/>
  <updated>2016-10-17T03:11:45.000Z</updated>
  <id>https://chengluffy.github.io/</id>
  
  <author>
    <name>成璐飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10.17</title>
    <link href="https://chengluffy.github.io/2016/10/17/10-17/"/>
    <id>https://chengluffy.github.io/2016/10/17/10-17/</id>
    <published>2016-10-17T02:10:16.000Z</published>
    <updated>2016-10-17T03:11:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;讲下无聊的事情。&quot;&gt;&lt;a href=&quot;#讲下无聊的事情。&quot; class=&quot;headerlink&quot; title=&quot;讲下无聊的事情。&quot;&gt;&lt;/a&gt;讲下无聊的事情。&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;有人一直教育我，说，不要争这一时，以后会有更好的。&lt;br&gt;有人说，你失去了太阳还有月亮，你失去了月亮还有群星。&lt;br&gt;他们这么说着，以 &lt;strong&gt;为你好&lt;/strong&gt; 的名义对我进行劝说。&lt;/p&gt;
&lt;p&gt;我一直以来也是这么以为的的，所有的东西，拿得起就放的下，傲首挺胸，&lt;strong&gt;前进！前进！前进！！&lt;/strong&gt;&lt;br&gt;有时候睡不着，最怕的就是回想很久之前的事，最最怕的是想到 &lt;del&gt;如果当时我没有这样会怎样&lt;/del&gt; 。所以选择性的忘记很多东西，忽略很多东西，搞得朋友们谈起往事，我还要一点点回忆他们所说的人、事，现在发现，这是一个大失误，其他的都记不清了，所能回想的都是自己不愿意回想的， &lt;del&gt;如果当时，如果我有能力负担着它们一起前进&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;别人把你当傻瓜，最可笑的是你说出了自己的苦衷，却觉得自己还是个傻瓜。&lt;br&gt;父母的命令我本来准备随时抗争的。我有个邻居，正好比我大几岁，正好和我想法一样，正不好，他先抗争了下。离家出走，带着自己喜欢的姑娘，跑到自己想去的地方，过自己想要的生活，然后彻底断绝了和家人的所有联系，多好，多不好。第三年，父亲猝死，母亲伤心过渡，现在半疯半傻，弟弟娶的老婆能和弟弟每天能从夜里12 点吵到起床吃饭。我不知道这和他的离家出走有没有联系，发生这么多事，老爸下葬的时候都联系不到他，或许他和我当时的想法一样，混出个名堂，再回家给老子长脸。世事难料！&lt;br&gt;我就这样看着他把我的想法先行试了一遍，我看不到他现在的生活，却看到了一种可能的后果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我怂了。&lt;/strong&gt;&lt;br&gt;怂了就认了，一直以来也没什么抱怨，好好的活着。之前能喝半斤白酒，醉后屁话不停，现在一罐啤酒就醉，醉后闭口无言，也无从说起。越来越喜欢看喜剧，有时莫名奇妙被戳中了笑点，好过一切。&lt;br&gt;&lt;em&gt;生活这玩意儿，是怎么把人一步步逼向绝路的，不是活不下去的人生，是必须在明知毫无期盼的情况下活下去。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果现在有一件事，别人不让我做不让我得， &lt;strong&gt;为我好&lt;/strong&gt;，我其实是知道的，这一次不争，以后就是彻底失去了机会，与世无争。我最近总在想大不了一败涂地，也好过被过往的梦魇一直缠绕。但是……我还是害怕上面的事出现在我身上，一步也迈不出，一次反抗也没有。&lt;/p&gt;
&lt;p&gt;都是借口，全是扯淡，败寇路飞，一败涂地。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;讲下无聊的事情。&quot;&gt;&lt;a href=&quot;#讲下无聊的事情。&quot; class=&quot;headerlink&quot; title=&quot;讲下无聊的事情。&quot;&gt;&lt;/a&gt;讲下无聊的事情。&lt;/h2&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://chengluffy.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="丑事" scheme="https://chengluffy.github.io/tags/%E4%B8%91%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发参考整理</title>
    <link href="https://chengluffy.github.io/2016/10/10/iOS%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E6%95%B4%E7%90%86/"/>
    <id>https://chengluffy.github.io/2016/10/10/iOS开发参考整理/</id>
    <published>2016-10-10T05:49:40.000Z</published>
    <updated>2016-10-20T03:21:50.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;以 &lt;code&gt;alertSheet&lt;/code&gt; 的方式进行图片选取： &lt;a href=&quot;https://github.com/d0ping/DBAttachmentPickerController&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DBAttachmentPickerController&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;UIDocumentInteractionController&lt;/code&gt; 进行文件分享： &lt;a href=&quot;http://www.jianshu.com/p/3f03897cf98a&quot; title=&quot;简书&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过UIDocumentInteractionController预览和分享”史蒂夫•乔布斯传”&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;压力触摸查看图片， &lt;a href=&quot;https://github.com/Yalantis/ForceBlur&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yalantis/ForceBlur&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iOS 10&lt;/code&gt; 之后，通过 &lt;strong&gt;Today Widget&lt;/strong&gt; 跳转系统设置页，&lt;a href=&quot;https://github.com/cyanzhong/app-tutorials/blob/master/prefs.md&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cyanzhong/app-tutorials&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/huanz/surge-hosts&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;kbd&gt;&lt;code&gt;Surge-Hosts&lt;/code&gt;&lt;/kbd&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/schickling/Device.swift&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swift 查看设备类型&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vsouza/awesome-ios&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-ios&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;以 &lt;code&gt;alertSheet&lt;/code&gt; 的方式进行图片选取： &lt;a href=&quot;https://github.com/d0ping/DBAttachmentPickerController&quot; title=&quot;Github&quot; target=&quot;_blank
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="参考资料" scheme="https://chengluffy.github.io/tags/%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Xcode8模拟器调试疯狂输出日志问题</title>
    <link href="https://chengluffy.github.io/2016/09/22/Xcode8%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%B0%83%E8%AF%95%E7%96%AF%E7%8B%82%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97%E9%97%AE%E9%A2%98/"/>
    <id>https://chengluffy.github.io/2016/09/22/Xcode8模拟器调试疯狂输出日志问题/</id>
    <published>2016-09-22T07:53:31.000Z</published>
    <updated>2016-09-24T03:52:41.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;product-&amp;gt;Scheme-&amp;gt;Edit Scheme&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/xcode8crazy.png&quot; alt=&quot;xcode8crazy&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;OS_ACTIVITY_MODE : disable&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;product-&amp;gt;Scheme-&amp;gt;Edit Scheme&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/xcode8crazy.png&quot; alt=&quot;xcode8crazy&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pl
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="Xcode8" scheme="https://chengluffy.github.io/tags/Xcode8/"/>
    
      <category term="模拟器" scheme="https://chengluffy.github.io/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>一种比较好玩的addSubview写法</title>
    <link href="https://chengluffy.github.io/2016/09/21/%E4%B8%80%E7%A7%8D%E6%AF%94%E8%BE%83%E5%A5%BD%E7%8E%A9%E7%9A%84addSubview%E5%86%99%E6%B3%95/"/>
    <id>https://chengluffy.github.io/2016/09/21/一种比较好玩的addSubview写法/</id>
    <published>2016-09-21T11:47:10.000Z</published>
    <updated>2016-09-21T12:00:43.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;addSubview&lt;/code&gt; 是 &lt;code&gt;iOS&lt;/code&gt; 编程中很常见的一个方法，常规的写法是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let lable = UILabel(frame: CGRect(x: 0, y: 0, width: 100, height: 40))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;lable.backgroundColor = UIColor.cyan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;lable.text = &amp;quot;addSubview&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;addSubview(lable)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;没有问题，不过当页面 &lt;code&gt;subViews&lt;/code&gt; 比较多时有点乱。&lt;br&gt;下面介绍另外一种写法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;addSubview(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            let label = UILabel(frame: CGRect(x: 0, y: 0, width: 100, height: 40))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            label.backgroundColor = UIColor.cyan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            label.text = &amp;quot;addSubview&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return label&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OC&lt;/code&gt; 写法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[self.view addSubview:(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 40)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				label.backgroundColor = [UIColor CyanColor];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        label.text = @&amp;quot;addSubview&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        label;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好处是每个控件的配置集中，一目了然。 &lt;strong&gt;仅作参考。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;addSubview&lt;/code&gt; 是 &lt;code&gt;iOS&lt;/code&gt; 编程中很常见的一个方法，常规的写法是：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="addSubview" scheme="https://chengluffy.github.io/tags/addSubview/"/>
    
      <category term="iOS 小知识" scheme="https://chengluffy.github.io/tags/iOS-%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Carthage使用</title>
    <link href="https://chengluffy.github.io/2016/09/20/Carthage%E4%BD%BF%E7%94%A8/"/>
    <id>https://chengluffy.github.io/2016/09/20/Carthage使用/</id>
    <published>2016-09-20T02:09:09.000Z</published>
    <updated>2016-10-12T06:26:22.000Z</updated>
    
    <content type="html">&lt;p&gt;最近使用 &lt;code&gt;Xcode8&lt;/code&gt; 适配 &lt;code&gt;iOS10&lt;/code&gt; ，&lt;code&gt;CocoaPods&lt;/code&gt; 暴露出很多问题，于是在新版本中尝试使用 &lt;code&gt;Carthage&lt;/code&gt; 进行包管理，这里仅记录使用方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装方法&quot;&gt;&lt;a href=&quot;#安装方法&quot; class=&quot;headerlink&quot; title=&quot;安装方法:&quot;&gt;&lt;/a&gt;安装方法:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官方给出了 &lt;code&gt;Homebrew&lt;/code&gt; 的&lt;a href=&quot;https://github.com/Carthage/Carthage#installing-carthage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装方法&lt;/a&gt;，不过有一句要注意:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Alternatively only on Xcode 7.x, you can use Homebrew and install the carthage tool on your system simply by running brew update and brew install carthage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基于上述，我们采用直接下载安装 &lt;a href=&quot;https://github.com/Carthage/Carthage/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Carthage.pkg&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法:&quot;&gt;&lt;/a&gt;使用方法:&lt;/h2&gt;&lt;p&gt;和 &lt;code&gt;CocoaPods&lt;/code&gt; 不同的时我没有找到类似 &lt;code&gt;pod search xxx&lt;/code&gt; 的搜索方法，目前只有在 &lt;strong&gt;Github&lt;/strong&gt; 的库主页找到相应的版本号。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; 到项目目录下。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim Cartfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以 &lt;code&gt;Alamofire 4.0&lt;/code&gt; 为例，写入&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;github &amp;quot;Alamofire/Alamofire&amp;quot; ~&amp;gt; 4.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 保存退出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;carthage update --platform ios&lt;/code&gt;。 &lt;code&gt;--platform ios&lt;/code&gt; 可以免除等待编译可能有的 &lt;code&gt;OS X&lt;/code&gt; &lt;code&gt;tvOS&lt;/code&gt;包的等待时间。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有错误的话基本上目录结构如图，多说一句，在我运行 &lt;code&gt;update&lt;/code&gt; 命令是有很多和 &lt;code&gt;Xcode7&lt;/code&gt; 插件相关的警告 &lt;strong&gt;log&lt;/strong&gt; 信息，我选择到 &lt;code&gt;~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/&lt;/code&gt; 目录下删除所有插件。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/img/carthage目录.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cartfile：文件用来标注你需要哪些依赖库，对应版本或者 Git 分支（需要提交到 Git）。&lt;/p&gt;
&lt;p&gt;Cartfile.resolved：文件用来跟踪项目当前所用的依赖版本号，为了保持多端开发一致（需要提交到 Git）。&lt;/p&gt;
&lt;p&gt;Carthage：文件夹用来存放依赖库的源文件和编译后的文件(不需要提交到 Git，可以修改.gitignore文件，增加忽略 Carthage 文件夹就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置Xcode自动搜索Framework的目录&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Target—&amp;gt;Build Setting—&amp;gt;Framework Search Path—&amp;gt;添加路径＂$(SRCROOT)/Carthage/Build/iOS＂&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加编译的额外脚本&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Target—&amp;gt;Build Phases —&amp;gt;”+”—&amp;gt;New Run Script Phase—&amp;gt;添加脚本＂/usr/local/bin/carthage copy-frameworks＂&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加文件&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Input Files—&amp;gt;添加路径＂$(SRCROOT)/Carthage/Build/iOS/库名.framework＂&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;这样就可以在项目哪正常使用了。管理版本和删除更改也很方便，推荐使用。&lt;/p&gt;
&lt;p&gt;10.12 更新：&lt;br&gt;发现 &lt;code&gt;Carthage&lt;/code&gt; 编译的 &lt;code&gt;.framework&lt;/code&gt; 文件不支持 &lt;code&gt;@IBInspectable&lt;/code&gt; 和 &lt;code&gt;@IBDesignable&lt;/code&gt; ……有点蛋疼。 在使用类似 &lt;code&gt;IBAnimatable&lt;/code&gt; 类似框架时，无法在 &lt;code&gt;storyboard&lt;/code&gt;/&lt;code&gt;xib&lt;/code&gt; 进行操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用 &lt;code&gt;Xcode8&lt;/code&gt; 适配 &lt;code&gt;iOS10&lt;/code&gt; ，&lt;code&gt;CocoaPods&lt;/code&gt; 暴露出很多问题，于是在新版本中尝试使用 &lt;code&gt;Carthage&lt;/code&gt; 进行包管理，这里仅记录使用方法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="Carthage" scheme="https://chengluffy.github.io/tags/Carthage/"/>
    
  </entry>
  
  <entry>
    <title>根据view生成图片的笔记</title>
    <link href="https://chengluffy.github.io/2016/08/15/%E6%A0%B9%E6%8D%AEview%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    <id>https://chengluffy.github.io/2016/08/15/根据view生成图片的笔记/</id>
    <published>2016-08-15T14:17:14.000Z</published>
    <updated>2016-08-15T14:23:05.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;UIGraphicsBeginImageContext(view.frame.size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let context = UIGraphicsGetCurrentContext()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.view.layer.renderInContext(context!)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let image = UIGraphicsGetImageFromCurrentImageContext()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UIGraphicsEndImageContext()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="image" scheme="https://chengluffy.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>IBAnimatable转场动画－Explode学习</title>
    <link href="https://chengluffy.github.io/2016/08/06/IBAnimatable%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%EF%BC%8DExplode%E5%AD%A6%E4%B9%A0/"/>
    <id>https://chengluffy.github.io/2016/08/06/IBAnimatable转场动画－Explode学习/</id>
    <published>2016-08-06T10:33:06.000Z</published>
    <updated>2016-10-12T06:32:53.000Z</updated>
    
    <content type="html">&lt;p&gt;阅读源码后可以发现，和一般自定义转场动画一致，新建继承 &lt;code&gt;NSObject&lt;/code&gt; 子类，遵守 &lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt; 协议。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;实现两个代理方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;返回动画持续时间代理:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -&amp;gt; NSTimeInterval &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return 0.75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义动画代理:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;func animateTransition(transitionContext: UIViewControllerContextTransitioning) &amp;#123;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      // 自定义动画函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参数 &lt;code&gt;transitionContext&lt;/code&gt; 可以可以通过 &lt;code&gt;func viewForKey(key: String) -&amp;gt; UIView?&lt;/code&gt; / &lt;code&gt;public func viewControllerForKey(key: String) -&amp;gt; UIViewController?&lt;/code&gt; 取出转场动画的对应 &lt;code&gt;fromView/toView&lt;/code&gt; / &lt;code&gt;formViewController/toViewController&lt;/code&gt; 对应的 &lt;code&gt;key&lt;/code&gt; 值:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;viewForKey:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UITransitionContextFromViewKey&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UITransitionContextToViewKey&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;viewControllerForKey:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UITransitionContextFromViewControllerKey&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;UITransitionContextToViewControllerKey&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;Explode&lt;/code&gt; 动画中主要在于屏幕快照的获取以及快照的区域分剪，核心代码:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 获取 fromView 的快照&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let fromViewSnapshot = fromView.snapshotViewAfterScreenUpdates(false)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 将快照剪切成小块加到 containerView 上&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for x in 0.0.stride(to: Double(size.width), by: Double(size.width / xFactor)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            for y in 0.0.stride(to: Double(size.height), by: Double(size.height / yFactor)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                let snapshotRegion = CGRect(x: CGFloat(x), y: CGFloat(y), width: size.width / xFactor, height: size.height / yFactor)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                // 按所给区域获得快照的小块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                let snapshot = fromViewSnapshot.resizableSnapshotViewFromRect(snapshotRegion, afterScreenUpdates: false, withCapInsets: UIEdgeInsetsZero)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                // 主要是设置位置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                snapshot.frame = snapshotRegion&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                // 将拼成的 fromView 快照加到 containerView的最顶层&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                containerView.addSubview(snapshot)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                snapshots.append(snapshot)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 将 fromView 隐藏&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;containerView.sendSubviewToBack(fromView)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;剩下的就是对 每一个小块的动画处理，并在动画结束后调用:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ransitionContext.completeTransition(!transitionContext.transitionWasCancelled())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这都很简单，难的是如何结合手势使用，这是最值得学习的地方，理解不深，可以 &lt;strong&gt;clone&lt;/strong&gt; &lt;a href=&quot;https://github.com/IBAnimatable/IBAnimatable&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;源码&lt;/a&gt; 学习。&lt;/p&gt;
&lt;p&gt;实现过程主要是对 &lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt; 的学习使用，和 &lt;code&gt;IBAnimatable&lt;/code&gt; 的实现不同，我们采用 &lt;code&gt;NavigationController&lt;/code&gt; 管理界面，在 &lt;code&gt;FirstViewController&lt;/code&gt; 的 &lt;code&gt;func viewWillAppear(animated: Bool) {}&lt;/code&gt; 内设置代理: &lt;code&gt;navigationController?.delegate = self&lt;/code&gt;&lt;br&gt;(&lt;strong&gt;如果在方法: &lt;code&gt;func viewDidLoad() {}&lt;/code&gt; 设置代理会导致转场取消后无法再次进行自定义动画转场&lt;/strong&gt;)&lt;br&gt;实现代理方法:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;extension FirstViewController: UINavigationControllerDelegate &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -&amp;gt; UIViewControllerAnimatedTransitioning? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if operation == UINavigationControllerOperation.Push &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            // ExplodeAnimator 即为自定义的转场动画&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return ExplodeAnimator()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return nil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;之后就是对 &lt;code&gt;SecondViewController&lt;/code&gt; 内进行自定义手势 &lt;code&gt;popViewController&lt;/code&gt; :&lt;br&gt;首先对 &lt;code&gt;view&lt;/code&gt; 添加返回手势:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;view.addGestureRecognizer(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            let pan = UIScreenEdgePanGestureRecognizer(target: self, action: #selector(SecondViewController.pan(_:)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pan.edges = UIRectEdge.Left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return pan&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;手势回调方法:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;func pan(edgePan: UIScreenEdgePanGestureRecognizer) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        let progress = edgePan.translationInView(self.view).x / self.view.bounds.width&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if edgePan.state == UIGestureRecognizerState.Began &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.percentDrivenTransition = UIPercentDrivenInteractiveTransition()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.navigationController?.popViewControllerAnimated(true)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; else if edgePan.state == UIGestureRecognizerState.Changed &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.percentDrivenTransition?.updateInteractiveTransition(progress)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; else if edgePan.state == UIGestureRecognizerState.Cancelled || edgePan.state == UIGestureRecognizerState.Ended &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if progress &amp;gt; 0.5 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                self.percentDrivenTransition?.finishInteractiveTransition()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                self.percentDrivenTransition?.cancelInteractiveTransition()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.percentDrivenTransition = nil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同样，在 &lt;code&gt;SecondViewController&lt;/code&gt; 的 &lt;code&gt;func viewWillAppear(animated: Bool) {}&lt;/code&gt; 方法内设置代理: &lt;code&gt;navigationController!.delegate = self&lt;/code&gt;，区别只是在于多实现一个代理方法:&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;extension SecondViewController: UINavigationControllerDelegate &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -&amp;gt; UIViewControllerAnimatedTransitioning? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if operation == UINavigationControllerOperation.Pop &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return ExplodeAnimator()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return nil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func navigationController(navigationController: UINavigationController, interactionControllerForAnimationController animationController: UIViewControllerAnimatedTransitioning) -&amp;gt; UIViewControllerInteractiveTransitioning? &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if animationController is ExplodeAnimator &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return self.percentDrivenTransition&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return nil&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;大功告成，&lt;br&gt;效果展示:&lt;br&gt;&lt;img src=&quot;/img/ExplodeDemo.gif&quot; alt=&quot;Demo&quot;&gt;&lt;br&gt;代码地址: &lt;a href=&quot;https://github.com/ChengLuffy/AnimatedTransitioningExplode/tree/master&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodeDemo&lt;/a&gt;。&lt;br&gt;&lt;a href=&quot;https://github.com/IBAnimatable/IBAnimatable&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IBAnimatable&lt;/a&gt; 源码的实现基于高度的封装，这也是望尘莫及的地方。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;阅读源码后可以发现，和一般自定义转场动画一致，新建继承 &lt;code&gt;NSObject&lt;/code&gt; 子类，遵守 &lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt; 协议。&lt;/p&gt;
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="IBAnimatable" scheme="https://chengluffy.github.io/tags/IBAnimatable/"/>
    
      <category term="转场动画" scheme="https://chengluffy.github.io/tags/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Explode" scheme="https://chengluffy.github.io/tags/Explode/"/>
    
  </entry>
  
  <entry>
    <title>office文件的iOS-UTI支持</title>
    <link href="https://chengluffy.github.io/2016/08/05/office%E6%96%87%E4%BB%B6%E7%9A%84iOS-UTI%E6%94%AF%E6%8C%81/"/>
    <id>https://chengluffy.github.io/2016/08/05/office文件的iOS-UTI支持/</id>
    <published>2016-08-05T10:45:24.000Z</published>
    <updated>2016-08-05T11:01:41.000Z</updated>
    
    <content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件格式&lt;/th&gt;
&lt;th&gt;UTI Types&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;  doc&lt;/td&gt;
&lt;td&gt;com.microsoft.word.doc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  docx&lt;/td&gt;
&lt;td&gt;org.openxmlformats.wordprocessingml.document&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  ppt&lt;/td&gt;
&lt;td&gt;com.microsoft.powerpoint.ppt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  pptx&lt;/td&gt;
&lt;td&gt;org.openxmlformats.presentationml.presentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  xls&lt;/td&gt;
&lt;td&gt;com.microsoft.excel.xls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  xlsx&lt;/td&gt;
&lt;td&gt;org.openxmlformats.spreadsheetml.sheet&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;但是仅仅是这样是不够的，以 &lt;code&gt;.docx&lt;/code&gt; 格式为例，还需要增加 &lt;code&gt;CFBundleTypeRole&lt;/code&gt; 和 &lt;code&gt;LSHandlerRank&lt;/code&gt; 两个键值。&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;.docx&lt;/code&gt; 设置 &lt;code&gt;info.plist&lt;/code&gt; 的 &lt;code&gt;Source Code&lt;/code&gt; 代码举例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dict&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;key&amp;gt;CFBundleTypeName&amp;lt;/key&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;string&amp;gt;Microsoft Word 2003 XML document&amp;lt;/string&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;string&amp;gt;Viewer&amp;lt;/string&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;key&amp;gt;LSHandlerRank&amp;lt;/key&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;string&amp;gt;Alternate&amp;lt;/string&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;key&amp;gt;LSItemContentTypes&amp;lt;/key&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;array&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;string&amp;gt;org.openxmlformats.wordprocessingml.document&amp;lt;/string&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/array&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/14523848/6613238&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apple documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件格式&lt;/th&gt;
&lt;th&gt;UTI Types&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;  doc&lt;/td&gt;
&lt;td&gt;com.microsoft.word.doc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;

    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="UTI" scheme="https://chengluffy.github.io/tags/UTI/"/>
    
      <category term=".doc" scheme="https://chengluffy.github.io/tags/doc/"/>
    
      <category term=".docx" scheme="https://chengluffy.github.io/tags/docx/"/>
    
      <category term=".ppt" scheme="https://chengluffy.github.io/tags/ppt/"/>
    
      <category term=".pptx" scheme="https://chengluffy.github.io/tags/pptx/"/>
    
      <category term=".xls" scheme="https://chengluffy.github.io/tags/xls/"/>
    
      <category term=".xlsx" scheme="https://chengluffy.github.io/tags/xlsx/"/>
    
  </entry>
  
  <entry>
    <title>JPFPSStatus源码学习</title>
    <link href="https://chengluffy.github.io/2016/07/28/JPFPSStatus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://chengluffy.github.io/2016/07/28/JPFPSStatus源码学习/</id>
    <published>2016-07-27T17:02:30.000Z</published>
    <updated>2016-07-30T05:25:51.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;iOS&lt;/code&gt; 调试程序时 &lt;code&gt;FPS&lt;/code&gt; 作为反应 &lt;strong&gt;UI&lt;/strong&gt; 是否流畅的指标，一般的 &lt;strong&gt;60&lt;/strong&gt; 的 &lt;code&gt;FPS&lt;/code&gt; 值时， 程序界面就可以正常流畅地显示，而大型的运算处理等都会降低 &lt;code&gt;FPS&lt;/code&gt; 值造成 &lt;strong&gt;UI&lt;/strong&gt; 卡顿。如何优化程序逻辑以达到提升 &lt;code&gt;FPS&lt;/code&gt; 值的目的不在本次的学习范围内，只是在开发过程中有用到 &lt;a href=&quot;https://github.com/joggerplus/JPFPSStatus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JPFPSStatus&lt;/a&gt;，代码量不多，学习下。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先介绍下主要使用类 &lt;code&gt;CADisplayLink&lt;/code&gt; &lt;strong&gt;Xcode&lt;/strong&gt; 给出的介绍如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class representing a timer bound to the display vsync&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译应该是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;类代表一个绑定到屏幕垂直同步显示的定时器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更加详细的说明见 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/QuartzCore/Reference/CADisplayLink_ClassRef/#//apple_ref/occ/clm/CADisplayLink&quot; title=&quot;developer.apple&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CADisplayLink should not be subclassed.&lt;br&gt;CADisplayLink 不可被继承。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其创建实例的方法为&lt;br&gt;&lt;code&gt;Object-C:&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (CADisplayLink *)displayLinkWithTarget:(id)target&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                selector:(SEL)sel&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;or &lt;code&gt;Swift:&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(target target: &lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;, selector sel: &lt;span class=&quot;type&quot;&gt;Selector&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数解释：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;target:&lt;/th&gt;
&lt;th&gt;An object to be notified when the screen should be updated. // 当屏幕刷新是所通知的对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sel:&lt;/td&gt;
&lt;td&gt;The method to call on the target. // 所通知对象调用的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;实例应被加入 &lt;code&gt;RunLoop&lt;/code&gt;， &lt;code&gt;mode&lt;/code&gt; 选择为： &lt;code&gt;NSRunLoopCommonModes&lt;/code&gt;&lt;br&gt;实例销毁时应从 &lt;code&gt;RunLoop&lt;/code&gt; 中移除。&lt;br&gt;实例创建后默认就开始向目标发送通知，可以设置 &lt;code&gt;Bool&lt;/code&gt; 属性值 &lt;code&gt;paused&lt;/code&gt; 来 &lt;em&gt;暂停／开启&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;另一个关键的属性值 &lt;code&gt;timestamp&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the time value associated with the last frame that was displayed. (read-only)&lt;br&gt;与已显示的最后一帧相关联的时间值。 （只读）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么求 &lt;code&gt;FPS&lt;/code&gt; -界面每秒显示帧数-的基本思路就可以得出， &lt;code&gt;CADisplayLink&lt;/code&gt; 的实例被创建后，界面每次刷新 &lt;strong&gt;UI&lt;/strong&gt; 都会调用所关联的 &lt;code&gt;target&lt;/code&gt; 的 &lt;code&gt;sel&lt;/code&gt; 方法，记录调用次数，在方法中我们拿到 &lt;code&gt;CADisplayLink&lt;/code&gt; 实例，获取其属性值 &lt;code&gt;timestamp&lt;/code&gt; 并记录，当 &lt;code&gt;timestamp&lt;/code&gt; 相差 &lt;em&gt;1秒&lt;/em&gt; 时期间方法调用次数就是界面的 &lt;code&gt;FPS&lt;/code&gt;。具体实现见源码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;- (void)displayLinkTick:(CADisplayLink *)link &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (lastTime == 0) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      // 初次调用直接记录时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lastTime = link.timestamp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    count++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSTimeInterval interval = link.timestamp - lastTime;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 在时间差为1s后，count即为fps&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (interval &amp;lt; 1) return;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    lastTime = link.timestamp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    float fps = count / interval;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    count = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    NSString *text = [NSString stringWithFormat:@&amp;quot;%d FPS&amp;quot;,(int)round(fps)];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [fpsLabel setText: text];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (_fpsHandler) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _fpsHandler((int)round(fps));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上就是关于FPS计算的主要代码，源码中对系统是否进入活跃状态的通知进行接受，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[NSNotificationCenter defaultCenter] addObserver: self&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                 selector: @selector(applicationDidBecomeActiveNotification)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                     name: UIApplicationDidBecomeActiveNotification&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                   object: nil];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [[NSNotificationCenter defaultCenter] addObserver: self&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                 selector: @selector(applicationWillResignActiveNotification)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                     name: UIApplicationWillResignActiveNotification&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                   object: nil];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接受通知的方法第一次遇到，记录学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整体实现过程并不复杂，源码使用的是 &lt;code&gt;Object-C&lt;/code&gt; 之后可以用 &lt;code&gt;Swift&lt;/code&gt; 实现一遍（已实现： &lt;a href=&quot;https://github.com/ChengLuffy/FPSStatusSwift&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt; ）。&lt;/li&gt;
&lt;li&gt;不理解的是，源码将 &lt;code&gt;fps&lt;/code&gt; 显示的 &lt;code&gt;UILabel&lt;/code&gt; 加载到系统的 &lt;code&gt;rootViewController&lt;/code&gt; 上，也就是说在其他界面是无法显示的，可以加到 &lt;code&gt;Window&lt;/code&gt; 上以达到在所有页面显示的目的。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;iOS&lt;/code&gt; 调试程序时 &lt;code&gt;FPS&lt;/code&gt; 作为反应 &lt;strong&gt;UI&lt;/strong&gt; 是否流畅的指标，一般的 &lt;strong&gt;60&lt;/strong&gt; 的 &lt;code&gt;FPS&lt;/code&gt; 值时， 程序界面就可以正常流畅地显示，而大型的运算处理等都会降低 &lt;code&gt;FPS&lt;/code&gt; 值造成 &lt;strong&gt;UI&lt;/strong&gt; 卡顿。如何优化程序逻辑以达到提升 &lt;code&gt;FPS&lt;/code&gt; 值的目的不在本次的学习范围内，只是在开发过程中有用到 &lt;a href=&quot;https://github.com/joggerplus/JPFPSStatus&quot;&gt;JPFPSStatus&lt;/a&gt;，代码量不多，学习下。&lt;br&gt;
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="iOS FPS" scheme="https://chengluffy.github.io/tags/iOS-FPS/"/>
    
      <category term="源码学习" scheme="https://chengluffy.github.io/tags/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS模拟器调试3DTouch</title>
    <link href="https://chengluffy.github.io/2016/07/22/iOS%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%B0%83%E8%AF%953DTouch/"/>
    <id>https://chengluffy.github.io/2016/07/22/iOS模拟器调试3DTouch/</id>
    <published>2016-07-22T11:58:44.000Z</published>
    <updated>2016-07-22T16:43:49.000Z</updated>
    
    <content type="html">&lt;p&gt;模拟器设置栏的 &lt;code&gt;Hardware&lt;/code&gt; 内选择 &lt;code&gt;Use Trackpad force for 3D touch&lt;/code&gt; 快捷键 &lt;code&gt;^ + com + 3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3DTouch-Demo: &lt;a href=&quot;https://github.com/ChengLuffy/3DTouch-Demo&quot; title=&quot;Github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/3d300d0e626e&quot; title=&quot;跟着官方文档学习3D Touch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;跟着官方文档学习3D Touch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/5e2827c9be29&quot; title=&quot;3DTouch入门篇&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3DTouch入门篇&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;模拟器设置栏的 &lt;code&gt;Hardware&lt;/code&gt; 内选择 &lt;code&gt;Use Trackpad force for 3D touch&lt;/code&gt; 快捷键 &lt;code&gt;^ + com + 3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3DTouch-Demo: &lt;a href=
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="3D Touch" scheme="https://chengluffy.github.io/tags/3D-Touch/"/>
    
      <category term="Xcode 模拟器" scheme="https://chengluffy.github.io/tags/Xcode-%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>代码配置IBAnimatable转场动画</title>
    <link href="https://chengluffy.github.io/2016/07/07/%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AEIBAnimatable%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <id>https://chengluffy.github.io/2016/07/07/代码配置IBAnimatable转场动画/</id>
    <published>2016-07-07T13:02:25.000Z</published>
    <updated>2016-10-21T02:29:09.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/JakeLin/IBAnimatable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IBAnimatable&lt;/a&gt; 是由 &lt;a href=&quot;https://github.com/JakeLin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JakeLin&lt;/a&gt; 在Github上开源的动画开源库，在学习 &lt;code&gt;Swift&lt;/code&gt; 时曾经在练手项目 &lt;a href=&quot;https://github.com/ChengLuffy/ShadowsocksFree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShadowsocksFree&lt;/a&gt; 中学习使用过，其最吸引我的是可以在 &lt;code&gt;StoryBoard&lt;/code&gt; 中直接配置转场动画，但是我在项目中一些情境下需要使用代码配置，Github上并没有找到类似的 &lt;code&gt;API&lt;/code&gt; 介绍，最后通过阅读源码实现效果，总结如下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;10.12 更新：&lt;br&gt;文章基于 &lt;code&gt;IBAnimatable 3.0&lt;/code&gt;/ &lt;code&gt;swift 3.0&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在成功导入后，&lt;code&gt;StoryBoard&lt;/code&gt; 的转场动画就可以配置，所以源码一定是对 &lt;code&gt;UIStoryboardSegue&lt;/code&gt; 进行了继承自定义。在 &lt;code&gt;IBAnimatable&lt;/code&gt; 文件夹内搜索可以得到所有的结果，基于 &lt;code&gt;Demo&lt;/code&gt; 中演示的转场动画，选择 &lt;code&gt;Card&lt;/code&gt; 的 &lt;code&gt;Segue&lt;/code&gt; 设置进行查看。源码如下&lt;br&gt;&lt;code&gt;swift 3.0:&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;open override func perform() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    destination.transitioningDelegate = TransitionPresenterManager.sharedManager().retrievePresenter(transitionAnimationType: .cards(direction: .forward))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    source.present(destination, animated: true, completion: nil)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码理解为为：目的 &lt;code&gt;VC&lt;/code&gt; 的转场代理的自定义配置、源 &lt;code&gt;VC&lt;/code&gt; 进行模态推出目的 &lt;code&gt;VC&lt;/code&gt; 。点到 &lt;code&gt;TransitionPresenterManager&lt;/code&gt; 注释如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;TransitionPresenter Manager: Used to cache the Presenters for Present and Dismiss transitions&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;证明没找错。&lt;br&gt;&lt;code&gt;TransitionPresenterManager&lt;/code&gt; 只有一个方法:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public func retrievePresenter(transitionAnimationType: TransitionAnimationType, transitionDuration: Duration = defaultTransitionDuration, interactiveGestureType: InteractiveGestureType? = nil) -&amp;gt; TransitionPresenter &amp;#123;）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其参数：&lt;code&gt;TransitionAnimationType&lt;/code&gt; 点进去之后可以发现是转场动画的枚举； &lt;code&gt;Duration&lt;/code&gt; 即 &lt;code&gt;NSTimeInterval&lt;/code&gt; 用于设定转场动画时间，默认是  &lt;code&gt;0.75&lt;/code&gt;；&lt;code&gt;InteractiveGestureType&lt;/code&gt; 是对目的 &lt;code&gt;VC&lt;/code&gt; 返回源 &lt;code&gt;VC&lt;/code&gt; 的手势枚举，根据所选转场动画的不同手势的参数：&lt;code&gt;GestureDirection&lt;/code&gt; 所选择的枚举值也不同。&lt;/p&gt;
&lt;p&gt;所以当我们有代码配置 &lt;code&gt;IBAnimatable&lt;/code&gt; 转场动画需要时只要设置目的 &lt;code&gt;VC&lt;/code&gt; 的 &lt;code&gt;transitioningDelegate&lt;/code&gt; ，用 &lt;code&gt;TransitionPresenterManager&lt;/code&gt;的 &lt;code&gt;retrievePresenter&lt;/code&gt; 方法配置动画选项。之后用源 &lt;code&gt;VC&lt;/code&gt; 模态化推出目的 &lt;code&gt;VC&lt;/code&gt; 就可以。&lt;/p&gt;
&lt;h2 id=&quot;16-10-21&quot;&gt;&lt;a href=&quot;#16-10-21&quot; class=&quot;headerlink&quot; title=&quot;16.10.21&quot;&gt;&lt;/a&gt;16.10.21&lt;/h2&gt;&lt;p&gt;需要注意的是每种转场方式的 &lt;code&gt;direction&lt;/code&gt; 参数各自不同，不能随意设置，比如 &lt;code&gt;3.0&lt;/code&gt; 版本 &lt;code&gt;.cards(direction: )&lt;/code&gt; 参数设置，只有 &lt;code&gt;.backward/.forward&lt;/code&gt; 两种形式，设置其他参数 &lt;code&gt;Xcode&lt;/code&gt; 不会报错，但是在运行时会有意想不到的 &lt;strong&gt;bug&lt;/strong&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/JakeLin/IBAnimatable&quot;&gt;IBAnimatable&lt;/a&gt; 是由 &lt;a href=&quot;https://github.com/JakeLin&quot;&gt;JakeLin&lt;/a&gt; 在Github上开源的动画开源库，在学习 &lt;code&gt;Swift&lt;/code&gt; 时曾经在练手项目 &lt;a href=&quot;https://github.com/ChengLuffy/ShadowsocksFree&quot;&gt;ShadowsocksFree&lt;/a&gt; 中学习使用过，其最吸引我的是可以在 &lt;code&gt;StoryBoard&lt;/code&gt; 中直接配置转场动画，但是我在项目中一些情境下需要使用代码配置，Github上并没有找到类似的 &lt;code&gt;API&lt;/code&gt; 介绍，最后通过阅读源码实现效果，总结如下。&lt;/p&gt;
    
    </summary>
    
      <category term="iOSDev" scheme="https://chengluffy.github.io/categories/iOSDev/"/>
    
    
      <category term="IBAnimatable" scheme="https://chengluffy.github.io/tags/IBAnimatable/"/>
    
  </entry>
  
  <entry>
    <title>自己</title>
    <link href="https://chengluffy.github.io/2016/07/03/%E8%87%AA%E5%B7%B1/"/>
    <id>https://chengluffy.github.io/2016/07/03/自己/</id>
    <published>2016-07-03T15:34:30.000Z</published>
    <updated>2016-07-11T12:57:07.000Z</updated>
    
    <content type="html">&lt;p&gt;马上正式毕业，对于自己未来阴暗的预感&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;作为一个二流大学的数学与应用数学专业毕业生，学艺不精，喜欢编程，却到了大三才受到&lt;code&gt;iOS:Object-C&lt;/code&gt; 的系统教育，没有办法理解那么多底层的东西可能是编程人生的一大败笔。结合现在的就业形势，突然有了一种不好的预感。&lt;/p&gt;
&lt;p&gt;大三的时候开始学习&lt;code&gt;Object-C&lt;/code&gt; ，当时移动端编程比较热门的是 &lt;strong&gt;Android&lt;/strong&gt; 和 &lt;strong&gt;iOS&lt;/strong&gt; 端编程，由于大学课程对&lt;code&gt;Java&lt;/code&gt;课程痛苦的回忆以及自己的&lt;code&gt;C&lt;/code&gt;语言基础，所以选择了入门 &lt;strong&gt;iOS&lt;/strong&gt; 端程序开发学习，靠家里支持买了个 &lt;em&gt;MBP&lt;/em&gt; 从此开始一入编程深似海，也深深的热爱上了码代码。&lt;/p&gt;
&lt;p&gt;关于&lt;code&gt;Object-C&lt;/code&gt;的学习过程，其实有一点 &lt;code&gt;C&lt;/code&gt; 语言或者 &lt;code&gt;Java&lt;/code&gt; 语言基础，应该很好理解。大多数人所说的难点：面向对象编程也只有真正的熟悉代码后的思考才会有用，所以，当时并没有什么感悟，直到看大神们的编程源码才真正懂得一些。学习的后半端会尝试一些 &lt;code&gt;MVC&lt;/code&gt; 等设计思路，当时想的太少，导致后面看大神源码时的深深的挫败感。对于编程基础课程的缺失表现在无法处理 &lt;code&gt;SQLite&lt;/code&gt; 语句这一项，好在在之后接触到 &lt;a href=&quot;https://realm.io/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt;，算是度过了这一关，至于以后遇到 &lt;code&gt;SQLite&lt;/code&gt; 的需要，也只能面向 &lt;strong&gt;Google&lt;/strong&gt; 编程了=_=。&lt;/p&gt;
&lt;p&gt;说到挫败感，最大的还是实习期间的第一个项目。大四在石家庄的一家创业公司实习，独立完成一个 iPad 端应用，如今也被老板卖给不同的客户有了不同的版本，一直没有告诉他的是，我始终没有办法处理应用消耗内存过高的问题，由于整个应用的显示都是图片，所以猜测是那个地方不停的出现内存泄漏，当时正好遇到了各位开发大神在网上争论 &lt;code&gt;iOS&lt;/code&gt; 开发圆角的最佳实现，在拜读各位大神为了流畅性而做出的努力后第一次有了： &lt;del&gt;我可能一辈子都无法达到那种高度&lt;/del&gt; 的感觉。而关于代码中的重复代码过多，以及对于 &lt;em&gt;3D&lt;/em&gt; 图像的处理，依然找不到合适的解决办法。之后对于一些动画的学习应用也只不过是聊以自慰。&lt;/p&gt;
&lt;p&gt;之后开始学习 &lt;code&gt;Swift&lt;/code&gt; 说实话，我可以明确的感觉到它是一门很漂亮的语言，但是在&lt;strong&gt;&lt;em&gt;闭包&lt;/em&gt;&lt;/strong&gt;减肥－简化的学习中又遇到了相当大的挫败感，按照怎样的方式把&lt;strong&gt;&lt;em&gt;闭包&lt;/em&gt;&lt;/strong&gt;写的尽可能的简单，现在都没想明白。之后也因为大四需要毕业答辩而回学校做准备，同时在此期间真正意义上爱上了 &lt;em&gt;面向Google编程&lt;/em&gt;，至于毕业论文，也由于自己这一年多的实践很简单的完成。而翻墙的过程中也正好是学习 &lt;code&gt;Swift&lt;/code&gt; 的时间，所以有了 &lt;a href=&quot;https://github.com/ChengLuffy/ShadowsocksFree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShadowsocksFree&lt;/a&gt; 这个 &lt;code&gt;Shadowsocks&lt;/code&gt;账号的归档管理工具的写作想法，这段时间还是蛮开心的。&lt;/p&gt;
&lt;p&gt;对于自己的第一份工作，工资很少，没见过三险一金，甚至作为一个新手，根本没有大神在工作中进行指导，主管只看效果、催进度，所以即使离开倒也没有什么特别的失落感。现在学校的一切处理接近尾声，也要开始考虑找一份新的工作时，惊奇的发现满大街都是手机端开发工程师-_-#，一个比一个厉害，招聘要求一个比一个高，倒不是对自己不自信，只是隐隐的对于可能无法从事编程开发行业的担忧，或许就会想自己身边的一些人，大学毕业从事一些毫无疑义的工作的害怕心理，之后这些心理慢慢发展成自己的阴暗面折麽着自己。&lt;/p&gt;
&lt;p&gt;做开发的程序员那么多，真正能证明自己价值的也没多少，自己会在之后站在怎样的高度，这是之前的担忧。现在众多羁绊也使得自己在这条路上走下去的愿景变得有点不现实😂。&lt;/p&gt;
&lt;p&gt;我想无论之后从事怎样的行业，对于这个行业的热爱是不会减退的， &lt;code&gt;WWDC2016&lt;/code&gt; 看的我热血沸腾，继续码代码是我对于未来美好生活的一点点急切的希望。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;马上正式毕业，对于自己未来阴暗的预感&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://chengluffy.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="迷茫" scheme="https://chengluffy.github.io/tags/%E8%BF%B7%E8%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>怪蜀黍的编程日记</title>
    <link href="https://chengluffy.github.io/2016/07/02/%E7%BC%96%E7%A8%8B%E6%97%A5%E8%AE%B0/"/>
    <id>https://chengluffy.github.io/2016/07/02/编程日记/</id>
    <published>2016-07-01T16:30:08.000Z</published>
    <updated>2016-10-19T06:00:40.000Z</updated>
    
    <content type="html">&lt;p&gt;一个并不是要成为海贼王的路飞，希望能在代码中找到自己的意义所在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/Dream.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;project&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/SpechtLite.Config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SpechtLite.Config&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;fork 自 &lt;a href=&quot;https://github.com/DomYY/SpechtLite.Config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DomYY/SpechtLite.Config&lt;/a&gt; ，规则根据自己喜好修改。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/SS-R-QRCodeAnalysis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SS-R-QRCodeAnalysis&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;macOS 端对 &lt;code&gt;ss/ssr&lt;/code&gt; 二维码进行解析。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/LoveFreshBeen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LoveFreshBeen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;对 &lt;a href=&quot;https://github.com/ZhongTaoTian/LoveFreshBeen&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZhongTaoTian/LoveFreshBeen&lt;/a&gt; 进行 &lt;code&gt;swift3&lt;/code&gt; 迁移。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/AnimatedTransitioningExplode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimatedTransitioningExplode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;/2016/08/06/IBAnimatable转场动画－Explode学习/&quot;&gt;IBAnimatable转场动画－Explode学习&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/ChengLuffy/ShadowsocksFreeForMac&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShadowsocksFreeForMac&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;macOS 插件，简单学习。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/FPSStatusSwift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FPSStatusSwift&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FPS&lt;/code&gt; 实时显示的swift实现， &lt;a href=&quot;/2016/07/28/JPFPSStatus源码学习/&quot;&gt;Blog&lt;/a&gt; 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/3DTouch-Demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3DTouch-Demo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;学习 &lt;code&gt;3D Touch&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://github.com/ChengLuffy/Popover&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Popover&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Fork自&lt;a href=&quot;https://github.com/corin8823/Popover&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;corin8823/Popover&lt;/a&gt; 应用到&lt;code&gt;ShadowsocksFress&lt;/code&gt;项目中，并作相应的本地化适应。对于边缘点击的修正得到了原作者的注意。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  &lt;a href=&quot;https://github.com/ChengLuffy/ShadowsocksFree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ShadowsocksFree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Swift&lt;/code&gt;实践项目，有感于搬瓦工的不稳定性，从&lt;a href=&quot;http://www.ishadowsocks.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ishadowsocks&lt;/a&gt; 获取限时免费的&lt;strong&gt;SS&lt;/strong&gt;账号度过不稳定期。同时作为&lt;code&gt;Swift&lt;/code&gt;第一个实践项目，尽可能的完善相关功能，属于&lt;strong&gt;SS&lt;/strong&gt;账号归档管理工具。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  &lt;a href=&quot;https://github.com/ChengLuffy/UITableViewCellAutoHeight&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UITableViewCellAutoHeight&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Object-C&lt;/code&gt;代码，同样是实习工作时项目需要。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  &lt;a href=&quot;https://github.com/ChengLuffy/StarsForEvaluation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StarsForEvaluation&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Object-C&lt;/code&gt;实现触摸或输入给予星评，实习工作时的项目需要。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;  &lt;a href=&quot;https://github.com/ChengLuffy/AnimationForShoppingCart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AnimationForShoppingCart&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;学习iOS开发是对CA动画的实践项目，&lt;code&gt;Object-C&lt;/code&gt;代码，同时制作了&lt;code&gt;cocoaPods&lt;/code&gt;轮子。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一个并不是要成为海贼王的路飞，希望能在代码中找到自己的意义所在&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/Dream.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工程" scheme="https://chengluffy.github.io/categories/%E5%B7%A5%E7%A8%8B/"/>
    
    
      <category term="GitHub汇总" scheme="https://chengluffy.github.io/tags/GitHub%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
</feed>
