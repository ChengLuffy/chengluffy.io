<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[IBAnimatable转场动画－Explode学习]]></title>
      <url>https://chengluffy.github.io/2016/08/06/IBAnimatable%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%EF%BC%8DExplode%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>阅读源码后可以发现，和一般自定义转场动画一致，新建继承 <code>NSObject</code> 子类，遵守 <code>UIViewControllerAnimatedTransitioning</code> 协议。</p>
<a id="more"></a>
<p>实现两个代理方法:</p>
<ul>
<li><p>返回动画持续时间代理:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func transitionDuration(transitionContext: UIViewControllerContextTransitioning?) -&gt; NSTimeInterval &#123;</div><div class="line">        return 0.75</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义动画代理:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func animateTransition(transitionContext: UIViewControllerContextTransitioning) &#123;    </div><div class="line">      // 自定义动画函数</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参数 <code>transitionContext</code> 可以可以通过 <code>func viewForKey(key: String) -&gt; UIView?</code> / <code>public func viewControllerForKey(key: String) -&gt; UIViewController?</code> 取出转场动画的对应 <code>fromView/toView</code> / <code>formViewController/toViewController</code> 对应的 <code>key</code> 值:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">viewForKey:</div><div class="line">UITransitionContextFromViewKey</div><div class="line">UITransitionContextToViewKey</div><div class="line"></div><div class="line">viewControllerForKey:</div><div class="line">UITransitionContextFromViewControllerKey</div><div class="line">UITransitionContextToViewControllerKey</div></pre></td></tr></table></figure>
<p>在 <code>Explode</code> 动画中主要在于屏幕快照的获取以及快照的区域分剪，核心代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 获取 fromView 的快照</div><div class="line">let fromViewSnapshot = fromView.snapshotViewAfterScreenUpdates(false)</div><div class="line"></div><div class="line">        // 将快照剪切成小块加到 containerView 上</div><div class="line">        for x in 0.0.stride(to: Double(size.width), by: Double(size.width / xFactor)) &#123;</div><div class="line">            for y in 0.0.stride(to: Double(size.height), by: Double(size.height / yFactor)) &#123;</div><div class="line">                let snapshotRegion = CGRect(x: CGFloat(x), y: CGFloat(y), width: size.width / xFactor, height: size.height / yFactor)</div><div class="line"></div><div class="line">                // 按所给区域获得快照的小块</div><div class="line">                let snapshot = fromViewSnapshot.resizableSnapshotViewFromRect(snapshotRegion, afterScreenUpdates: false, withCapInsets: UIEdgeInsetsZero)</div><div class="line">                // 主要是设置位置</div><div class="line">                snapshot.frame = snapshotRegion</div><div class="line">                // 将拼成的 fromView 快照加到 containerView的最顶层</div><div class="line">                containerView.addSubview(snapshot)</div><div class="line">                snapshots.append(snapshot)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">// 将 fromView 隐藏</div><div class="line">containerView.sendSubviewToBack(fromView)</div></pre></td></tr></table></figure></p>
<p>剩下的就是对 每一个小块的动画处理，并在动画结束后调用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ransitionContext.completeTransition(!transitionContext.transitionWasCancelled())</div></pre></td></tr></table></figure></p>
<p>这都很简单，难的是如何结合手势使用，这是最值得学习的地方，理解不深，可以 <strong>clone</strong> <a href="https://github.com/IBAnimatable/IBAnimatable" title="Github" target="_blank" rel="external">源码</a> 学习。</p>
<p>实现过程主要是对 <code>UIPercentDrivenInteractiveTransition</code> 的学习使用，和 <code>IBAnimatable</code> 的实现不同，我们采用 <code>NavigationController</code> 管理界面，在 <code>FirstViewController</code> 的 <code>func viewWillAppear(animated: Bool) {}</code> 内设置代理: <code>navigationController?.delegate = self</code><br>(<strong>如果在方法: <code>func viewDidLoad() {}</code> 设置代理会导致转场取消后无法再次进行自定义动画转场</strong>)<br>实现代理方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">extension FirstViewController: UINavigationControllerDelegate &#123;</div><div class="line">    func navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -&gt; UIViewControllerAnimatedTransitioning? &#123;</div><div class="line">        if operation == UINavigationControllerOperation.Push &#123;</div><div class="line">            // ExplodeAnimator 即为自定义的转场动画</div><div class="line">            return ExplodeAnimator()</div><div class="line">        &#125; else &#123;</div><div class="line">            return nil</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后就是对 <code>SecondViewController</code> 内进行自定义手势 <code>popViewController</code> :<br>首先对 <code>view</code> 添加返回手势:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">view.addGestureRecognizer(&#123;</div><div class="line">            let pan = UIScreenEdgePanGestureRecognizer(target: self, action: #selector(SecondViewController.pan(_:)))</div><div class="line">            pan.edges = UIRectEdge.Left</div><div class="line">            return pan</div><div class="line">        &#125;())</div></pre></td></tr></table></figure></p>
<p>手势回调方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">func pan(edgePan: UIScreenEdgePanGestureRecognizer) &#123;</div><div class="line"></div><div class="line">        let progress = edgePan.translationInView(self.view).x / self.view.bounds.width</div><div class="line"></div><div class="line">        if edgePan.state == UIGestureRecognizerState.Began &#123;</div><div class="line">            self.percentDrivenTransition = UIPercentDrivenInteractiveTransition()</div><div class="line">            self.navigationController?.popViewControllerAnimated(true)</div><div class="line">        &#125; else if edgePan.state == UIGestureRecognizerState.Changed &#123;</div><div class="line">            self.percentDrivenTransition?.updateInteractiveTransition(progress)</div><div class="line">        &#125; else if edgePan.state == UIGestureRecognizerState.Cancelled || edgePan.state == UIGestureRecognizerState.Ended &#123;</div><div class="line">            if progress &gt; 0.5 &#123;</div><div class="line">                self.percentDrivenTransition?.finishInteractiveTransition()</div><div class="line">            &#125; else &#123;</div><div class="line">                self.percentDrivenTransition?.cancelInteractiveTransition()</div><div class="line">            &#125;</div><div class="line">            self.percentDrivenTransition = nil</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>同样，在 <code>SecondViewController</code> 的 <code>func viewWillAppear(animated: Bool) {}</code> 方法内设置代理: <code>navigationController!.delegate = self</code>，区别只是在于多实现一个代理方法:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">extension SecondViewController: UINavigationControllerDelegate &#123;</div><div class="line"></div><div class="line">    func navigationController(navigationController: UINavigationController, animationControllerForOperation operation: UINavigationControllerOperation, fromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -&gt; UIViewControllerAnimatedTransitioning? &#123;</div><div class="line">        if operation == UINavigationControllerOperation.Pop &#123;</div><div class="line">            return ExplodeAnimator()</div><div class="line">        &#125; else &#123;</div><div class="line">            return nil</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    func navigationController(navigationController: UINavigationController, interactionControllerForAnimationController animationController: UIViewControllerAnimatedTransitioning) -&gt; UIViewControllerInteractiveTransitioning? &#123;</div><div class="line">        if animationController is ExplodeAnimator &#123;</div><div class="line">            return self.percentDrivenTransition</div><div class="line">        &#125; else &#123;</div><div class="line">            return nil</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大功告成，<br>效果展示:<br><img src="/img/ExplodeDemo.gif" alt="Demo"><br>代码地址: <a href="https://github.com/ChengLuffy/AnimatedTransitioningExplode/tree/master" title="Github" target="_blank" rel="external">CodeDemo</a>。<br><a href="https://github.com/IBAnimatable/IBAnimatable" title="Github" target="_blank" rel="external">IBAnimatable</a> 源码的实现基于高度的封装，这也是望尘莫及的地方。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[office文件的iOS-UTI支持]]></title>
      <url>https://chengluffy.github.io/2016/08/05/office%E6%96%87%E4%BB%B6%E7%9A%84iOS-UTI%E6%94%AF%E6%8C%81/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>文件格式</th>
<th>UTI Types</th>
</tr>
</thead>
<tbody>
<tr>
<td>  doc</td>
<td>com.microsoft.word.doc</td>
</tr>
<tr>
<td>  docx</td>
<td>org.openxmlformats.wordprocessingml.document</td>
</tr>
<tr>
<td>  ppt</td>
<td>com.microsoft.powerpoint.ppt</td>
</tr>
<tr>
<td>  pptx</td>
<td>org.openxmlformats.presentationml.presentation</td>
</tr>
<tr>
<td>  xls</td>
<td>com.microsoft.excel.xls</td>
</tr>
<tr>
<td>  xlsx</td>
<td>org.openxmlformats.spreadsheetml.sheet</td>
</tr>
</tbody>
</table>
<p>但是仅仅是这样是不够的，以 <code>.docx</code> 格式为例，还需要增加 <code>CFBundleTypeRole</code> 和 <code>LSHandlerRank</code> 两个键值。</p>
<p>以 <code>.docx</code> 设置 <code>info.plist</code> 的 <code>Source Code</code> 代码举例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;dict&gt;</div><div class="line">    &lt;key&gt;CFBundleTypeName&lt;/key&gt;</div><div class="line">    &lt;string&gt;Microsoft Word 2003 XML document&lt;/string&gt;</div><div class="line">    &lt;key&gt;CFBundleTypeRole&lt;/key&gt;</div><div class="line">    &lt;string&gt;Viewer&lt;/string&gt;</div><div class="line">    &lt;key&gt;LSHandlerRank&lt;/key&gt;</div><div class="line">    &lt;string&gt;Alternate&lt;/string&gt;</div><div class="line">    &lt;key&gt;LSItemContentTypes&lt;/key&gt;</div><div class="line">    &lt;array&gt;</div><div class="line">        &lt;string&gt;org.openxmlformats.wordprocessingml.document&lt;/string&gt;</div><div class="line">    &lt;/array&gt;</div><div class="line">&lt;/dict&gt;</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://stackoverflow.com/a/14523848/6613238" target="_blank" rel="external">Stack Overflow</a><br><a href="https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html" target="_blank" rel="external">Apple documentation</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JPFPSStatus源码学习]]></title>
      <url>https://chengluffy.github.io/2016/07/28/JPFPSStatus%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><code>iOS</code> 调试程序时 <code>FPS</code> 作为反应 <strong>UI</strong> 是否流畅的指标，一般的 <strong>60</strong> 的 <code>FPS</code> 值时， 程序界面就可以正常流畅地显示，而大型的运算处理等都会降低 <code>FPS</code> 值造成 <strong>UI</strong> 卡顿。如何优化程序逻辑以达到提升 <code>FPS</code> 值的目的不在本次的学习范围内，只是在开发过程中有用到 <a href="https://github.com/joggerplus/JPFPSStatus" target="_blank" rel="external">JPFPSStatus</a>，代码量不多，学习下。<br><a id="more"></a></p>
<p>首先介绍下主要使用类 <code>CADisplayLink</code> <strong>Xcode</strong> 给出的介绍如下：</p>
<blockquote>
<p>Class representing a timer bound to the display vsync</p>
</blockquote>
<p>翻译应该是：</p>
<blockquote>
<p>类代表一个绑定到屏幕垂直同步显示的定时器</p>
</blockquote>
<p>更加详细的说明见 <a href="https://developer.apple.com/library/ios/documentation/QuartzCore/Reference/CADisplayLink_ClassRef/#//apple_ref/occ/clm/CADisplayLink" title="developer.apple" target="_blank" rel="external">官方文档</a></p>
<p>需要注意的是</p>
<blockquote>
<p>CADisplayLink should not be subclassed.<br>CADisplayLink 不可被继承。</p>
</blockquote>
<p>其创建实例的方法为<br><code>Object-C:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">+ (CADisplayLink *)displayLinkWithTarget:(id)target</div><div class="line">                                selector:(SEL)sel</div></pre></td></tr></table></figure></p>
<p>or <code>Swift:</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(target target: <span class="type">AnyObject</span>, selector sel: <span class="type">Selector</span>)</div></pre></td></tr></table></figure></p>
<p>参数解释：</p>
<table>
<thead>
<tr>
<th>target:</th>
<th>An object to be notified when the screen should be updated. // 当屏幕刷新是所通知的对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>sel:</td>
<td>The method to call on the target. // 所通知对象调用的方法</td>
</tr>
</tbody>
</table>
<p>实例应被加入 <code>RunLoop</code>， <code>mode</code> 选择为： <code>NSRunLoopCommonModes</code><br>实例销毁时应从 <code>RunLoop</code> 中移除。<br>实例创建后默认就开始向目标发送通知，可以设置 <code>Bool</code> 属性值 <code>paused</code> 来 <em>暂停／开启</em></p>
<p>另一个关键的属性值 <code>timestamp</code></p>
<blockquote>
<p>the time value associated with the last frame that was displayed. (read-only)<br>与已显示的最后一帧相关联的时间值。 （只读）</p>
</blockquote>
<p>那么求 <code>FPS</code> -界面每秒显示帧数-的基本思路就可以得出， <code>CADisplayLink</code> 的实例被创建后，界面每次刷新 <strong>UI</strong> 都会调用所关联的 <code>target</code> 的 <code>sel</code> 方法，记录调用次数，在方法中我们拿到 <code>CADisplayLink</code> 实例，获取其属性值 <code>timestamp</code> 并记录，当 <code>timestamp</code> 相差 <em>1秒</em> 时期间方法调用次数就是界面的 <code>FPS</code>。具体实现见源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (void)displayLinkTick:(CADisplayLink *)link &#123;</div><div class="line">    if (lastTime == 0) &#123;</div><div class="line">      // 初次调用直接记录时间</div><div class="line">        lastTime = link.timestamp;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    count++;</div><div class="line">    NSTimeInterval interval = link.timestamp - lastTime;</div><div class="line">    // 在时间差为1s后，count即为fps</div><div class="line">    if (interval &lt; 1) return;</div><div class="line">    lastTime = link.timestamp;</div><div class="line">    float fps = count / interval;</div><div class="line">    count = 0;</div><div class="line"></div><div class="line">    NSString *text = [NSString stringWithFormat:@&quot;%d FPS&quot;,(int)round(fps)];</div><div class="line">    [fpsLabel setText: text];</div><div class="line">    if (_fpsHandler) &#123;</div><div class="line">        _fpsHandler((int)round(fps));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上就是关于FPS计算的主要代码，源码中对系统是否进入活跃状态的通知进行接受，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[[NSNotificationCenter defaultCenter] addObserver: self</div><div class="line">                                                 selector: @selector(applicationDidBecomeActiveNotification)</div><div class="line">                                                     name: UIApplicationDidBecomeActiveNotification</div><div class="line">                                                   object: nil];</div><div class="line"></div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver: self</div><div class="line">                                                 selector: @selector(applicationWillResignActiveNotification)</div><div class="line">                                                     name: UIApplicationWillResignActiveNotification</div><div class="line">                                                   object: nil];</div></pre></td></tr></table></figure></p>
<p>接受通知的方法第一次遇到，记录学习。</p>
<ul>
<li>整体实现过程并不复杂，源码使用的是 <code>Object-C</code> 之后可以用 <code>Swift</code> 实现一遍（已实现： <a href="https://github.com/ChengLuffy/FPSStatusSwift" title="Github" target="_blank" rel="external">Demo</a> ）。</li>
<li>不理解的是，源码将 <code>fps</code> 显示的 <code>UILabel</code> 加载到系统的 <code>rootViewController</code> 上，也就是说在其他界面是无法显示的，可以加到 <code>Window</code> 上以达到在所有页面显示的目的。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS模拟器调试3DTouch]]></title>
      <url>https://chengluffy.github.io/2016/07/22/iOS%E6%A8%A1%E6%8B%9F%E5%99%A8%E8%B0%83%E8%AF%953DTouch/</url>
      <content type="html"><![CDATA[<p>模拟器设置栏的 <code>Hardware</code> 内选择 <code>Use Trackpad force for 3D touch</code> 快捷键 <code>^ + com + 3</code></p>
<p>3DTouch-Demo: <a href="https://github.com/ChengLuffy/3DTouch-Demo" title="Github" target="_blank" rel="external">Github</a></p>
<blockquote>
<p>参考资料</p>
</blockquote>
<p><a href="http://www.jianshu.com/p/3d300d0e626e" title="跟着官方文档学习3D Touch" target="_blank" rel="external">跟着官方文档学习3D Touch</a></p>
<p><a href="http://www.jianshu.com/p/5e2827c9be29" title="3DTouch入门篇" target="_blank" rel="external">3DTouch入门篇</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码配置IBAnimatable转场动画]]></title>
      <url>https://chengluffy.github.io/2016/07/07/%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AEIBAnimatable%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/JakeLin/IBAnimatable" target="_blank" rel="external">IBAnimatable</a> 是由 <a href="https://github.com/JakeLin" target="_blank" rel="external">JakeLin</a> 在Github上开源的动画开源库，在学习 <code>Swift</code> 时曾经在练手项目 <a href="https://github.com/ChengLuffy/ShadowsocksFree" target="_blank" rel="external">ShadowsocksFree</a> 中学习使用过，其最吸引我的是可以在 <code>StoryBoard</code> 中直接配置转场动画，但是我在项目中一些情境下需要使用代码配置，Github上并没有找到类似的 <code>API</code> 介绍，最后通过阅读源码实现效果，总结如下。</p>
<a id="more"></a>
<p>文章基于 <code>IBAnimatable 2.3</code> 。</p>
<p>在成功导入后，<code>StoryBoard</code> 的转场动画就可以配置，所以源码一定是对 <code>UIStoryboardSegue</code> 进行了继承自定义。在 <code>IBAnimatable</code> 文件夹内搜索可以得到所有的结果，基于 <code>Demo</code> 中演示的转场动画，选择 <code>Card</code> 的 <code>Segue</code> 设置进行查看。源码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class PresentCardsSegue: UIStoryboardSegue &#123;</div><div class="line">  public override func perform() &#123;</div><div class="line">    destinationViewController.transitioningDelegate = PresenterManager.sharedManager().retrievePresenter(.Cards(direction: .Forward))</div><div class="line">    sourceViewController.presentViewController(destinationViewController, animated: true, completion: nil)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>翻译为：目的 <code>VC</code> 的转场代理的自定义配置、源 <code>VC</code> 进行模态推出目的 <code>VC</code> 。点到 <code>PresenterManager</code> 注释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Presenter Manager: Used to cache the Presenters for Present and Dismiss transitions</div></pre></td></tr></table></figure></p>
<p>证明没找错。<br><code>PresenterManager</code> 只有一个方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public func retrievePresenter(transitionAnimationType: TransitionAnimationType, transitionDuration: Duration = defaultTransitionDuration, interactiveGestureType: InteractiveGestureType? = nil) -&gt; Presenter</div></pre></td></tr></table></figure></p>
<p>其参数：<code>TransitionAnimationType</code> 点进去之后可以发现是转场动画的枚举； <code>Duration</code> 即 <code>NSTimeInterval</code> 用于设定转场动画时间，默认是  <code>0.75</code>；<code>InteractiveGestureType</code> 是对目的 <code>VC</code> 返回源 <code>VC</code> 的手势枚举，根据所选转场动画的不同手势的参数：<code>GestureDirection</code> 所选择的枚举值也不同。</p>
<p>所以当我们有代码配置 <code>IBAnimatable</code> 转场动画需要时只要设置目的 <code>VC</code> 的 <code>transitioningDelegate</code> ，用 <code>PresenterManager</code>的 <code>retrievePresenter</code> 方法配置动画选项。之后用源 <code>VC</code> 模态化推出目的 <code>VC</code> 就可以。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自己]]></title>
      <url>https://chengluffy.github.io/2016/07/03/%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<p>马上正式毕业，对于自己未来阴暗的预感</p>
<a id="more"></a>
<p>作为一个二流大学的数学与应用数学专业毕业生，学艺不精，喜欢编程，却到了大三才受到<code>iOS:Object-C</code> 的系统教育，没有办法理解那么多底层的东西可能是编程人生的一大败笔。结合现在的就业形势，突然有了一种不好的预感。</p>
<p>大三的时候开始学习<code>Object-C</code> ，当时移动端编程比较热门的是 <strong>Android</strong> 和 <strong>iOS</strong> 端编程，由于大学课程对<code>Java</code>课程痛苦的回忆以及自己的<code>C</code>语言基础，所以选择了入门 <strong>iOS</strong> 端程序开发学习，靠家里支持买了个 <em>MBP</em> 从此开始一入编程深似海，也深深的热爱上了码代码。</p>
<p>关于<code>Object-C</code>的学习过程，其实有一点 <code>C</code> 语言或者 <code>Java</code> 语言基础，应该很好理解。大多数人所说的难点：面向对象编程也只有真正的熟悉代码后的思考才会有用，所以，当时并没有什么感悟，直到看大神们的编程源码才真正懂得一些。学习的后半端会尝试一些 <code>MVC</code> 等设计思路，当时想的太少，导致后面看大神源码时的深深的挫败感。对于编程基础课程的缺失表现在无法处理 <code>SQLite</code> 语句这一项，好在在之后接触到 <a href="https://realm.io/cn/" target="_blank" rel="external">Realm</a>，算是度过了这一关，至于以后遇到 <code>SQLite</code> 的需要，也只能面向 <strong>Google</strong> 编程了=_=。</p>
<p>说到挫败感，最大的还是实习期间的第一个项目。大四在石家庄的一家创业公司实习，独立完成一个 iPad 端应用，如今也被老板卖给不同的客户有了不同的版本，一直没有告诉他的是，我始终没有办法处理应用消耗内存过高的问题，由于整个应用的显示都是图片，所以猜测是那个地方不停的出现内存泄漏，当时正好遇到了各位开发大神在网上争论 <code>iOS</code> 开发圆角的最佳实现，在拜读各位大神为了流畅性而做出的努力后第一次有了： <del>我可能一辈子都无法达到那种高度</del> 的感觉。而关于代码中的重复代码过多，以及对于 <em>3D</em> 图像的处理，依然找不到合适的解决办法。之后对于一些动画的学习应用也只不过是聊以自慰。</p>
<p>之后开始学习 <code>Swift</code> 说实话，我可以明确的感觉到它是一门很漂亮的语言，但是在<strong><em>闭包</em></strong>减肥－简化的学习中又遇到了相当大的挫败感，按照怎样的方式把<strong><em>闭包</em></strong>写的尽可能的简单，现在都没想明白。之后也因为大四需要毕业答辩而回学校做准备，同时在此期间真正意义上爱上了 <em>面向Google编程</em>，至于毕业论文，也由于自己这一年多的实践很简单的完成。而翻墙的过程中也正好是学习 <code>Swift</code> 的时间，所以有了 <a href="https://github.com/ChengLuffy/ShadowsocksFree" target="_blank" rel="external">ShadowsocksFree</a> 这个 <code>Shadowsocks</code>账号的归档管理工具的写作想法，这段时间还是蛮开心的。</p>
<p>对于自己的第一份工作，工资很少，没见过三险一金，甚至作为一个新手，根本没有大神在工作中进行指导，主管只看效果、催进度，所以即使离开倒也没有什么特别的失落感。现在学校的一切处理接近尾声，也要开始考虑找一份新的工作时，惊奇的发现满大街都是手机端开发工程师-_-#，一个比一个厉害，招聘要求一个比一个高，倒不是对自己不自信，只是隐隐的对于可能无法从事编程开发行业的担忧，或许就会想自己身边的一些人，大学毕业从事一些毫无疑义的工作的害怕心理，之后这些心理慢慢发展成自己的阴暗面折麽着自己。</p>
<p>做开发的程序员那么多，真正能证明自己价值的也没多少，自己会在之后站在怎样的高度，这是之前的担忧。现在众多羁绊也使得自己在这条路上走下去的愿景变得有点不现实😂。</p>
<p>我想无论之后从事怎样的行业，对于这个行业的热爱是不会减退的， <code>WWDC2016</code> 看的我热血沸腾，继续码代码是我对于未来美好生活的一点点急切的希望。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[怪蜀黍的编程日记]]></title>
      <url>https://chengluffy.github.io/2016/07/02/%E7%BC%96%E7%A8%8B%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>一个并不是要成为海贼王的路飞，希望能在代码中找到自己的意义所在－_－!</p>
<p><img src="/img/Dream.png" alt=""></p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>project</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td> <a href="https://github.com/ChengLuffy/FPSStatusSwift" target="_blank" rel="external">FPSStatusSwift</a></td>
<td><code>FPS</code> 实时显示的swift实现， <a href="/2016/07/28/JPFPSStatus源码学习/">Blog</a> 。</td>
</tr>
<tr>
<td> <a href="https://github.com/ChengLuffy/3DTouch-Demo" target="_blank" rel="external">3DTouch-Demo</a></td>
<td>学习 <code>3D Touch</code>。</td>
</tr>
<tr>
<td> <a href="https://github.com/ChengLuffy/Popover" target="_blank" rel="external">Popover</a></td>
<td>Fork自<a href="https://github.com/corin8823/Popover" target="_blank" rel="external">corin8823/Popover</a> 应用到<code>ShadowsocksFress</code>项目中，并作相应的本地化适应。对于边缘点击的修正得到了原作者的注意。</td>
</tr>
<tr>
<td>  <a href="https://github.com/ChengLuffy/ShadowsocksFree" target="_blank" rel="external">ShadowsocksFree</a></td>
<td><code>Swift</code>实践项目，有感于搬瓦工的不稳定性，从<a href="http://www.ishadowsocks.net/" target="_blank" rel="external">ishadowsocks</a> 获取限时免费的<strong>SS</strong>账号度过不稳定期。同时作为<code>Swift</code>第一个实践项目，尽可能的完善相关功能，属于<strong>SS</strong>账号归档管理工具。</td>
</tr>
<tr>
<td>  <a href="https://github.com/ChengLuffy/UITableViewCellAutoHeight" target="_blank" rel="external">UITableViewCellAutoHeight</a></td>
<td><code>Object-C</code>代码，同样是实习工作时项目需要。</td>
</tr>
<tr>
<td>  <a href="https://github.com/ChengLuffy/StarsForEvaluation" target="_blank" rel="external">StarsForEvaluation</a></td>
<td><code>Object-C</code>实现触摸或输入给予星评，实习工作时的项目需要。</td>
</tr>
<tr>
<td>  <a href="https://github.com/ChengLuffy/RefreshControl-ImageViewAnimation" target="_blank" rel="external">RefreshControl-ImageViewAnimation</a></td>
<td><code>Swift</code>学习初实践。</td>
</tr>
<tr>
<td>  <a href="https://github.com/ChengLuffy/AnimationForShoppingCart" target="_blank" rel="external">AnimationForShoppingCart</a></td>
<td>学习iOS开发是对CA动画的实践项目，<code>Object-C</code>代码，同时制作了<code>cocoaPods</code>轮子。</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
  
  
</search>
